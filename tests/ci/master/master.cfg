# -*- python -*-
# ex: set syntax=python:
import tempfile
from os import environ
import re

from path import tempdir, Path

from buildbot.plugins import *
from buildbot.process.properties import WithProperties
from buildbot.steps.shell import ShellCommand

REPOURL = 'git://github.com/sametmax/tygs.git'
TEMPDIR = tempdir('tygs-ci')
MASTERDIR = Path(__file__).realpath().parent
VENV = TEMPDIR / 'venv'
BINDIR = VENV / 'bin'

COVERAGEDIR = MASTERDIR / "public_html" / "coverage"

COVERAGEREPORTDIR = COVERAGEDIR / "build-tygs-%(buildnumber)s"
TEMPCOVERAGEDIR = TEMPDIR / "htmlcov"
PYTHON = str(BINDIR / 'python')
DOCDIR = str(TEMPDIR / 'doc')
PIP = [PYTHON, '-m', 'pip']
# TEMPDIR = str(TEMPDIR)
VENV = str(VENV)

# ensure coverage reports dir exists
COVERAGEDIR.mkdir_p()


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("example-slave", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        REPOURL,
        workdir=str(TEMPDIR), branch='master',
        pollinterval=30))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl=REPOURL, mode='incremental',
                          workdir=str(TEMPDIR)))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=[environ.get('PYTHON_EXECUTABLE',
                                                        'python3.5'),
                                            "-m", "venv", VENV]))
factory.addStep(steps.ShellCommand(command=PIP + ["install", '-r',
                                   str(TEMPDIR / 'requirements.txt')]))
factory.addStep(steps.ShellCommand(command=PIP + ["install",
                                   str(TEMPDIR)+'[dev]']))
factory.addStep(steps.ShellCommand(command=[str(BINDIR / "sphinx-build"),
                                            "-b", "html", "source", "build"],
                                   workdir=DOCDIR))

class RunTox(ShellCommand):
    def __init__(self):
        ShellCommand.__init__(self, command=[str(BINDIR / "tox")],
                                    workdir=str(TEMPDIR))
    def createSummary(self, log):
        ShellCommand.createSummary(self, log)
        build_number = self.getProperty('buildnumber')
        url = "/coverage/build-tygs-%s/" % build_number
        d = str(TEMPCOVERAGEDIR / "index.html") % {"buildnumber": build_number}
        with open(d) as f:
            m = re.search(r'<span class="pc_cov">(\d+)%</span>', f.read())

        self.addURL("coverage %s%%" % m.group(1), url)

factory.addStep(RunTox())

factory.addStep(steps.DirectoryUpload(slavesrc=str(TEMPCOVERAGEDIR),
                                      masterdest=WithProperties(str(COVERAGEREPORTDIR))))

factory.addStep(steps.ShellCommand(command=PIP+["uninstall", "-y",
                                                "tygs"]))
factory.addStep(steps.RemoveDirectory(dir=str(TEMPDIR)))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      slavenames=["example-slave"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    # auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
c['status'].append(status.IRC(host="irc.freenode.net", nick="sametmax-buildbot",
                              channels=[{"channel": "#sametmax"},]))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Tygs"
c['titleURL'] = "https://github.com/sametmax/tygs"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
